/// All next primes for 2^n which can fit into an u64. The index in this array represents `n`.
/// Eg. next prime of 2^5 == NEXT_PRIMES_OF_TWO[5].
pub const NEXT_PRIMES_OF_TWO: &[u64] = &[
    1,
    3,
    5,
    11,
    17,
    37,
    67,
    131,
    257,
    521,
    1031,
    2053,
    4099,
    8209,
    16411,
    32771,
    65537,
    131101,
    262147,
    524309,
    1048583,
    2097169,
    4194319,
    8388617,
    16777259,
    33554467,
    67108879,
    134217757,
    268435459,
    536870923,
    1073741827,
    2147483659,
    4294967311,
    8589934609,
    17179869209,
    34359738421,
    68719476767,
    137438953481,
    274877906951,
    549755813911,
    1099511627791,
    2199023255579,
    4398046511119,
    8796093022237,
    17592186044423,
    35184372088891,
    70368744177679,
    140737488355333,
    281474976710677,
    562949953421381,
    1125899906842679,
    2251799813685269,
    4503599627370517,
    9007199254740997,
    18014398509482143,
    36028797018963971,
    72057594037928017,
    144115188075855881,
    288230376151711813,
    576460752303423619,
    1152921504606847009,
    2305843009213693967,
    4611686018427388039,
    9223372036854775837,
];

pub fn next_bigger_than(n: usize) -> u64 {
    let n = n as u64;
    NEXT_PRIMES_OF_TWO
        .iter()
        .find(|i| **i >= n)
        .copied()
        .expect("Number too big")
}
